/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-fuerte-turtlebot-1.0.2/debian/ros-fuerte-turtlebot/opt/ros/fuerte/stacks/turtlebot/turtlebot_node/msg/Drive.msg */
#ifndef TURTLEBOT_NODE_MESSAGE_DRIVE_H
#define TURTLEBOT_NODE_MESSAGE_DRIVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace turtlebot_node
{
template <class ContainerAllocator>
struct Drive_ {
  typedef Drive_<ContainerAllocator> Type;

  Drive_()
  : velocity(0.0)
  , radius(0.0)
  {
  }

  Drive_(const ContainerAllocator& _alloc)
  : velocity(0.0)
  , radius(0.0)
  {
  }

  typedef float _velocity_type;
  float velocity;

  typedef float _radius_type;
  float radius;


  typedef boost::shared_ptr< ::turtlebot_node::Drive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_node::Drive_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Drive
typedef  ::turtlebot_node::Drive_<std::allocator<void> > Drive;

typedef boost::shared_ptr< ::turtlebot_node::Drive> DrivePtr;
typedef boost::shared_ptr< ::turtlebot_node::Drive const> DriveConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::turtlebot_node::Drive_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::turtlebot_node::Drive_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace turtlebot_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::turtlebot_node::Drive_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::turtlebot_node::Drive_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_node::Drive_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cbd1637d308acca6b24c12a3db426e5e";
  }

  static const char* value(const  ::turtlebot_node::Drive_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcbd1637d308acca6ULL;
  static const uint64_t static_value2 = 0xb24c12a3db426e5eULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_node::Drive_<ContainerAllocator> > {
  static const char* value() 
  {
    return "turtlebot_node/Drive";
  }

  static const char* value(const  ::turtlebot_node::Drive_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_node::Drive_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 velocity\n\
float32 radius\n\
\n\
";
  }

  static const char* value(const  ::turtlebot_node::Drive_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::turtlebot_node::Drive_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::turtlebot_node::Drive_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velocity);
    stream.next(m.radius);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Drive_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_node::Drive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::turtlebot_node::Drive_<ContainerAllocator> & v) 
  {
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_NODE_MESSAGE_DRIVE_H

