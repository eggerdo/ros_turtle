#!/usr/bin/env python

import roslib; roslib.load_manifest('myturtle')

import rospy
import tf

import math
from math import sin, cos, pi

from nav_msgs.msg import Odometry

from roomba import *

ODOM_POSE_COVARIANCE = [1e-3, 0, 0, 0, 0, 0, 
                        0, 1e-3, 0, 0, 0, 0,
                        0, 0, 1e6, 0, 0, 0,
                        0, 0, 0, 1e6, 0, 0,
                        0, 0, 0, 0, 1e6, 0,
                        0, 0, 0, 0, 0, 1e3]
ODOM_POSE_COVARIANCE2 = [1e-9, 0, 0, 0, 0, 0, 
                         0, 1e-3, 1e-9, 0, 0, 0,
                         0, 0, 1e6, 0, 0, 0,
                         0, 0, 0, 1e6, 0, 0,
                         0, 0, 0, 0, 1e6, 0,
                         0, 0, 0, 0, 0, 1e-9]

ODOM_TWIST_COVARIANCE = [1e-3, 0, 0, 0, 0, 0, 
                         0, 1e-3, 0, 0, 0, 0,
                         0, 0, 1e6, 0, 0, 0,
                         0, 0, 0, 1e6, 0, 0,
                         0, 0, 0, 0, 1e6, 0,
                         0, 0, 0, 0, 0, 1e3]
ODOM_TWIST_COVARIANCE2 = [1e-9, 0, 0, 0, 0, 0, 
                          0, 1e-3, 1e-9, 0, 0, 0,
                          0, 0, 1e6, 0, 0, 0,
                          0, 0, 0, 1e6, 0, 0,
                          0, 0, 0, 0, 1e6, 0,
                          0, 0, 0, 0, 0, 1e-9]

if __name__ == '__main__':
	rospy.init_node('myturtle')
	max_rate = rospy.get_param('~max_rate')
	address = rospy.get_param('~address')

	roomba = Roomba()
	
	x = 0.0
	y = 0.0
	th = 0.0

	vx = 0.0
	vy = 0.0
	vth = 0.0
	
	odometryTransformBroadcaster = tf.TransformBroadcaster()
	odometryPublisher = rospy.Publisher("odom", Odometry)

	current_time = rospy.Time.now()
	last_time = rospy.Time.now()
	
	rate = rospy.Rate(max_rate)
	while not rospy.is_shutdown():

		rospy.spinOnce()
		current_time =  rospy.Time.now()

		dt = (current_time - last_time).toSec()

		sensor_data = roomba.getActuatorSensors()
		distance = sensor_data.distance
		angle = sensor_data.angle

		delta_x = cos(angle) * distance
		delta_y = -sin(angle) * distance
		
		last_angle = th
		x += cos(last_angle) * delta_x - sin(last_angle) * delta_y
		y += sin(last_angle) * delta_x + cos(last_angle) * delta_y
		th += angle
		
		odom_quat = (0., 0., sin(th/2.), cos(th/2.))
		
		transform = (x, y, 0.), odom_quat

		odom = Odometry()
		odom.header.frame_id = "odom"
		odom.header.stamp = current_time
		odom.pose.pose = Pose(Point(x, z, 0.), Quaternion(*odom_quat))
		
		odom.child_frame_id = "base_link"
		odom.twist.twist = Twist(Vector3(distance/dt, 0, 0), Vector3(0, 0, angle/dt))

		if sensor_data.requested_right_velocity == 0 and \
				sensor_data.requested_left_velocity == 0 and \
				sensor_data.distance == 0:
			odom.pose.covariance = ODOM_POSE_COVARIANCE2
			odom.twist.covariance = ODOM_TWIST_COVARIANCE2
		else:
			odom.pose.covariance = ODOM_POSE_COVARIANCE
			odom.twist.covariance = ODOM_TWIST_COVARIANCE

		odometryTransformBroadcaster.sendTransform(
			(x, y, 0),
			(odom_quat.x, odom_quat.y, odom_quat.z, odom_quat.w),
			current_time,
			"base_link",
			"odom"
		)

		odometryPublisher.publish(odom)
		
		last_time = current_time
		
		rate.sleep()

