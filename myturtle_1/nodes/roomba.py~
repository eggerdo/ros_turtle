#!/usr/bin/env ipython
# -*- coding: cp1252 -*-
# {written with Tab indenting 4 spaces}

'''
Created on Jul 19, 2012

@author: dominik
'''

from bluetooth import *
import thread
from struct import *
from collections import namedtuple
from time import gmtime, strftime, sleep
from RoombaDiagnostics import *

MAX_VELOCITY = 500
       
t_power_sensor_data = namedtuple('t_power_sensor_data', ['charging_state', 'voltage', 'current', 'temperature', 'charge', 'capacity'])

class Data( object ):
	pass

class Roomba( object ):
        
    ROOMBA_PULSES_TO_M = 0.000445558279992234
    
    def __init__(self, address):
    	self._sensor_state_struct = struct.Struct(">12B2hBHhb7HBH5B4h2HB6H2B4hb")
    	self._last_encoder_counts = None
        self.data = Data()
    	if not 'connected' in locals() or self.connected == False:
            self.connectRoomba(address)
 
    def connectRoomba(self, address):
        LOG('Connect...')
        
        self.socket = BluetoothSocket( RFCOMM )
        self.socket.connect((address, 1)) 
        self.socket.settimeout(5)
        
        self.connected = True
        self.isdocking = False
        
        try:
            # get power sensors in order to update docking state
            self.getPowerSensors()
        except:
            self.powerOn()
            self.getPowerSensors()
            
        self.enableControl()
        self.setPassiveMode();
        
    def disconnect(self):
        
        LOG('Disconnect...')
        self.socket.close()
        self.connected = False
    
    def getPowerSensors(self):
        
        send_format = 'BB'
        cmd = pack(send_format, 142, 3)
        self.socket.send(cmd)
        recv_format = '>BhhBhh'
        recv = self.receive(10)
        data = t_power_sensor_data._make(unpack(recv_format, recv))
        
        if data.charging_state in [1,2,3,5]:
            self.docked = True
            self.isdocking = False
        else:
            self.docked = False
            
        return data

    def getAllSensors(self):
	
        send_format = 'BB'
        cmd = pack(send_format, 142, 100)
        self.socket.send(cmd)
        receive_format = '>12B2hBHhb7HBH5B4h2HB6H2B4hb'
        recv = self.receive(80)
        self._deserialize(recv)
          
    def _deserialize(self, buffer):
		try:
			(self.data.bumps_wheeldrops,
			self.data.wall,
			self.data.cliff_left, self.data.cliff_front_left, self.data.cliff_front_right, self.data.cliff_right,
			self.data.virtual_wall,
			self.data.motor_overcurrents,
			self.data.dirt_detector_left, self.data.dirt_detector_right,
			self.data.remote_opcode, self.data.buttons,
			self.data.distance, self.data.angle,
			self.data.charging_state,
			self.data.voltage, self.data.current, self.data.temperature, self.data.charge, self.data.capacity,
			self.data.wall_signal, self.data.cliff_left_signal, self.data.cliff_front_left_signal,
			self.data.cliff_front_right_signal, self.data.cliff_right_signal,
			self.data.user_digital_inputs, self.data.user_analog_input,
			self.data.charging_sources_available,
			self.data.oi_mode,
			self.data.song_number, self.data.song_playing,
			self.data.number_of_stream_packets,
			self.data.requested_velocity, self.data.requested_radius,
			self.data.requested_right_velocity, self.data.requested_left_velocity,
			self.data.encoder_counts_left, self.data.encoder_counts_right,
			self.data.light_bumper,
			self.data.light_bump_left, self.data.light_bump_front_left, self.data.light_bump_center_left,
			self.data.light_bump_center_right, self.data.light_bump_front_right, self.data.light_bump_right,
			self.data.ir_opcode_left, self.data.ir_opcode_right,
			self.data.left_motor_current, self.data.right_motor_current,
			self.data.main_brish_current, self.data.side_brush_current,
			self.data.statis, ) = self._sensor_state_struct.unpack(buffer[0:80])
		except struct.error, e:
			raise roslib.message.DeserializationError(e)

		self.data.wall = bool(self.data.wall)
		self.data.cliff_left = bool(self.data.cliff_left)
		self.data.cliff_front_left = bool(self.data.cliff_front_left)
		self.data.cliff_front_right = bool(self.data.cliff_front_right)
		self.data.cliff_right = bool(self.data.cliff_right)
		self.data.virtual_wall = bool(self.data.virtual_wall)
		self.data.song_playing = bool(self.data.song_playing)

		# do unit conversions
		#self.data.header = std_msgs.Header(stamp=rospy.Time.from_seconds(timestamp))
		self.data.requested_velocity = float(self.data.requested_velocity) / 1000.
		self.data.requested_radius = float(self.data.requested_radius) / 1000.
		self.data.requested_right_velocity = float(self.data.requested_right_velocity) / 1000.
		self.data.requested_left_velocity = float(self.data.requested_left_velocity) / 1000.

		# The distance and angle calculation sent by the robot seems to
		# be really bad. Re-calculate the values using the raw enconder
		# counts.
		if self._last_encoder_counts:
			count_delta_left = self._normalize_encoder_count(
			  self.data.encoder_counts_left - self._last_encoder_counts[0], 0xffff)
			count_delta_right = self._normalize_encoder_count(
			  self.data.encoder_counts_right - self._last_encoder_counts[1], 0xffff)
			distance_left = count_delta_left * self.ROOMBA_PULSES_TO_M
			distance_right = count_delta_right * self.ROOMBA_PULSES_TO_M
			self.data.distance = (distance_left + distance_right) / 2.0
			self.data.angle = (distance_right - distance_left) / 258
		else:
			self.data.distance = 0
			self.data.angle = 0
			self._last_encoder_counts = (self.data.encoder_counts_left, self.data.encoder_counts_right)
        
		return self.data
	
    def _normalize_encoder_count(self, count_delta, maximal_count):
		if count_delta >= maximal_count / 2:
			return count_delta - maximal_count + 1
		elif count_delta <= -maximal_count / 2:
			return count_delta + maximal_count + 1
		return count_delta

    def start(self):
        send_format = 'B'
        cmd = pack(send_format, 128)
        self.socket.send(cmd)
    
    def enableControl(self):
        LOG('Enable Control')
        send_format = 'B'
        cmd = pack(send_format, 130)
        self.socket.send(cmd)
        sleep(0.02)
    
    def setSafeMode(self):
        LOG('Set Safe Mode')
        send_format = 'B'
        cmd = pack(send_format, 131)
        self.socket.send(cmd)
        sleep(0.02)
        
    def setFullMode(self):
        LOG('Set Full Mode')
        send_format = 'B'
        cmd = pack(send_format, 132)
        self.socket.send(cmd)
        sleep(0.02)
        
    def setPassiveMode(self):
        LOG('Set Passive Mode')
        self.start()
        sleep(0.02)
    
    def isDocked(self):
        return self.docked
    
    def isDocking(self):
        return self.isdocking;
    
    def dock(self):
        LOG('Dock started')
        self.enableControl()
        self.setSafeMode()
        send_format = 'B'
        cmd = pack(send_format, 143)
        self.socket.send(cmd)
        self.isdocking = True
        
    def undock(self):
        LOG('Undock started')
        self.enableControl()
        self.setSafeMode()
        self.driveBackwards(50)
        sleep(1)
        self.stop()
        
    def drive(self, velocity, radius):
        LOG('Drive v=%d, r=%d' %(velocity, radius))
        send_format = '>Bhh'
        cmd = pack(send_format, 137, velocity, radius)
        self.socket.send(cmd)
        
    def stop(self):
        self.drive(0,0)
        
    def capSpeed(self, speed):
        speed = min(speed, 100)
        speed = max(speed, 0)
        return speed
        
    def calculateVelocity(self, speed):
        return round(speed / 100.0 * MAX_VELOCITY)
        
    def driveBackwards(self, speed):
        LOG('Drive Back %d%%' %speed)
        speed = self.capSpeed(speed)
        velocity = self.calculateVelocity(speed)
        self.drive(-velocity, -32768)
        
    def driveForwards(self, speed):
        LOG('Drive Forward %d%%' %speed)
        speed = self.capSpeed(speed)
        velocity = self.calculateVelocity(speed)
        self.drive(velocity, -32768)
    
    def rotateRight(self, speed):
        LOG('Rotate %d%%' %speed)
        speed = self.capSpeed(speed)
        velocity = self.calculateVelocity(speed)
        self.drive(velocity, -1)
    
    def rotateLeft(self, speed):
        LOG('Rotate %d%%' %speed)
        speed = self.capSpeed(speed)
        velocity = self.calculateVelocity(speed)
        self.drive(velocity, 1)
    
    def powerOn(self):
        LOG('Power On')
        self.socket.send('$$$')
        self.socket.send('S@,8080\n')
        self.socket.send('S&,8000\n')
        sleep(0.5)
        self.socket.send('S&,8080\n')
        self.socket.send('---')
    
        
    def receive(self, length):
        result = ''
        while len(result) != length:
            result += self.socket.recv(length)
        return result
    
